---
old_url: generating_codesigning_certici.htm
title: "Generating Codesigning Certificates"
active_menu_item: developers
class_name: developers
full_width: true
---


You should codesign your APK files if you want to distribute them properly via App Stores such as Google Play. To do this, you first need to generate a Private Key.

If you would like assistance generating your keys, please contact [support@applicationcraft.com](mailto:support@applicationcraft.com) . We offer a service - [iOS Assist](/developers/documentation/ac-mobile-build-phonegap/certificates/manual/ios-keys-and-certificates/i-havent-got-a-mac) - that is designed to take away the pain from this process. Luckily, compared to iOS, Android is somewhat less of a challenge and so you will need a lot less assistance, if any. The only part of the process which is a little painful is the key generation described in this section.

## Obtain a suitable private key

In preparation for signing your application, you must first ensure that you have a suitable private key with which to sign. A suitable private key is one that:

 - Is in your possession.

 - Represents the personal, corporate, or organizational entity to be identified with the application.

 - Has a validity period that exceeds the expected lifespan of the application or application suite. A validity period of more than 25 years is recommended.

 - If you plan to publish your application(s) on Google Play, note that a validity period ending after 22 October 2033 is a requirement. You can not upload an application if it is signed with a key whose validity expires before that date.

 - Is not the debug key generated by the Android SDK tools.

 - The key may be self-signed.

If you do not have a suitable key, you must generate one.

There are a number of ways this can be done for Android, one is by using Keytool.

The Keytool utility is available in the Java Development Kit (JDK) available to download here: [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)

To generate a self-signed key with Keytool, use the keytool command and pass any of the options listed below (and any others, as needed).

<table>
<tr>
<td width="244">
  <strong>Keytool Option</strong>

</td>
<td width="17">
</td>
<td width="681">
  <strong>Description</strong>

</td>
</tr>
<tr>
<td width="244">
-genkey

</td>
<td width="17">
</td>
<td width="681">
Generate a key pair (public and private keys)

</td>
</tr>
<tr>
<td width="244">
-v

</td>
<td width="17">
</td>
<td width="681">
Enable verbose output.

</td>
</tr>
<tr>
<td width="244">
-alias (alias_name)

</td>
<td width="17">
</td>
<td width="681">
An alias for the key. Only the first 8 characters of the alias are used.

</td>
</tr>
<tr>
<td width="244">
-keyalg (alg)

</td>
<td width="17">
</td>
<td width="681">
The encryption algorithm to use when generating the key. Both DSA and RSA are supported.

</td>
</tr>
<tr>
<td width="244">
-keysize (size)

</td>
<td width="17">
</td>
<td width="681">
The size of each generated key (bits). If not supplied, Keytool uses a default key size of 1024 bits. In general, we recommend using a key size of 2048 bits or higher.

</td>
</tr>
<tr>
<td width="244">
-dname (name)

</td>
<td width="17">
</td>
<td width="681">
A Distinguished Name that describes who created the key. The value is used as the issuer and subject fields in the self-signed certificate.

Note that you do not need to specify this option in the command line. If not supplied, Jarsigner prompts you to enter each of the Distinguished Name fields (CN, OU, and so on).

</td>
</tr>
<tr>
<td width="244">
-keypass (password)

</td>
<td width="17">
</td>
<td width="681">
The password for the key.  As a security precaution, do not include this option in your command line. If not supplied, Keytool prompts you to enter the password. In this way, your password is not stored in your shell history.

</td>
</tr>
<tr>
<td width="244">
-validity (valdays)

</td>
<td width="17">
</td>
<td width="681">
The validity period for the key, in days.  Note: A value of 10000 or greater is recommended.

</td>
</tr>
<tr>
<td width="244">
-keystore (keystore-name).keystore

</td>
<td width="17">
</td>
<td width="681">
A name for the keystore containing the private key.

</td>
</tr>
<tr>
<td width="244">
-storepass (password)

</td>
<td width="17">
</td>
<td width="681">
A password for the keystore. As a security precaution, do not include this option in your command line. If not supplied, Keytool prompts you to enter the password. In this way, your password is not stored in your shell history.

</td>
</tr>
</table>

Here's an example of a Keytool command that generates a private key:

    $ keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000
   

Running the example command above, Keytool prompts you to provide passwords for the keystore (Certificate password) and key (File password).

 - It then generates the keystore as a file called my-release-key.keystore.

 - The keystore and key are protected by the passwords you entered.

 - The alias is a name that you will use when adding your certificate file to [AC Mobile Build](/developers/documentation/ac-mobile-build-phonegap/ac-mobile-build/) .

For more information see here: [http://developer.android.com/tools/publishing/app-signing.html](http://developer.android.com/tools/publishing/app-signing.html) .

Save the keystore file in a location you can remember. Remember the password: you will need to enter it to [AC Mobile Build](/developers/documentation/ac-mobile-build-phonegap/ac-mobile-build/) , otherwise we cannot use your certificate.

**To Add your Android Certificate File**

 - Open the AC Mobile Build window in console.

 - Click to the “Add certificate” in the Android section.

 - Enter required fields.

![certAndroid](/img/docs/certandroid.zoom83.png)

When have entered the required certificate file, press the Build/Rebuild button to start the build process. Application Craft will now call the build service in the background and the build will run asynchronously.
